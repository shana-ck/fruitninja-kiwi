/**
 * @module
 * Bare minimum implementation for creating, parsing, and formatting
 * AT Protocol-blessed CIDv1 format.
 *
 * As specified by AT Protocol, the blessed format is:
 * - Multibase: `base32` (b)
 * - Multicodec: `dag-cbor` (0x71) for record, `raw` (0x55) for blobs
 * - Multihash: `sha-256` (0x12)
 */
/**
 * Raw digest information
 */
export interface Digest {
    code: number;
    size: number;
    digest: Uint8Array;
    bytes: Uint8Array;
}
/**
 * CID information
 */
export interface CID {
    version: number;
    code: number;
    digest: Digest;
    bytes: Uint8Array;
}
/**
 * Information regarding CID buffer being inspected
 */
export interface InspectedCID {
    version: number;
    codec: number;
    multihashCode: number;
    digestSize: number;
    multihashSize: number;
    size: number;
}
/**
 * Parse a CID string
 */
export declare const parse: (cid: string) => CID;
/**
 * Provides information regarding the CID buffer
 */
export declare const inspect: (initialBytes: Uint8Array) => InspectedCID;
/**
 * Decode the first CID contained, and return the remainder.
 * @param bytes Buffer to decode
 * @returns A tuple containing the first CID in the buffer, and the remainder
 */
export declare const decodeFirst: (bytes: Uint8Array) => [cid: CID, remainder: Uint8Array];
/**
 * Decodes a CID buffer
 */
export declare const decode: (bytes: Uint8Array) => CID;
/**
 * Creates a CID
 */
export declare const create: (code: number, input: Uint8Array) => Promise<CID>;
/**
 * Serialize CID into a string
 */
export declare const format: (cid: CID) => string;
export declare const createDigest: (code: number, digest: Uint8Array) => Digest;
export declare const encode: (version: number, code: number, multihash: Uint8Array) => Uint8Array;
