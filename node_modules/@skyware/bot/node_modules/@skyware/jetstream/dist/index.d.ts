import type { At, ComAtprotoSyncSubscribeRepos, Records as _Records } from "@atcute/client/lexicons";
import "@atcute/bluesky/lexicons";
import { EventEmitter } from "node:events";
import { WebSocket } from "partysocket";
/** Record mappings. */
export interface Records extends _Records {
}
/**
 * Options for the {@link Jetstream} class.
 */
export interface JetstreamOptions<WantedCollections extends Collection = Collection> {
    /**
     * The full subscription endpoint to connect to.
     * @default "wss://jetstream1.us-east.bsky.network/subscribe"
     */
    endpoint?: string;
    /**
     * The record collections that you want to receive updates for.
     * Leave this empty to receive updates for all record collections.
     */
    wantedCollections?: Array<WantedCollections>;
    /**
     * The DIDs that you want to receive updates for.
     * Leave this empty to receive updates for all DIDs.
     */
    wantedDids?: Array<string>;
    /**
     * The Unix timestamp in microseconds that you want to receive updates from.
     */
    cursor?: number;
    /**
     * The WebSocket implementation to use (e.g. `import ws from "ws"`).
     * Not required if you are on Node 21.0.0 or newer, or another environment that provides a WebSocket implementation.
     */
    ws?: unknown;
}
/**
 * The events that are emitted by the {@link Jetstream} class.
 * @see {@link Jetstream#on}
 */
export type JetstreamEvents<WantedCollections extends Collection = Collection> = {
    open: [];
    close: [];
    commit: [event: CommitEvent<WantedCollections>];
    account: [event: AccountEvent];
    identity: [event: IdentityEvent];
    error: [error: Error, cursor?: number];
};
/**
 * The Jetstream client.
 */
export declare class Jetstream<WantedCollections extends CollectionOrWildcard = CollectionOrWildcard, ResolvedCollections extends Collection = ResolveLexiconWildcard<WantedCollections>> extends EventEmitter<JetstreamEvents<ResolvedCollections>> {
    /** WebSocket connection to the server. */
    ws?: WebSocket;
    /** The full connection URL. */
    url: URL;
    /** The current cursor. */
    cursor?: number;
    /** The WebSocket implementation to use. */
    private wsImpl?;
    constructor(options?: JetstreamOptions<WantedCollections>);
    /**
     * Opens a WebSocket connection to the server.
     */
    start(): void;
    /**
     * Closes the WebSocket connection.
     */
    close(): void;
    /**
     * Listen for records created in a specific collection.
     * @param collection The name of the collection to listen for.
     * @param listener A callback function that receives the commit event.
     */
    onCreate<T extends ResolvedCollections>(collection: T, listener: (event: CommitCreateEvent<T>) => void): void;
    /**
     * Listen for records updated in a specific collection.
     * @param collection The name of the collection to listen for.
     * @param listener A callback function that receives the commit event.
     */
    onUpdate<T extends ResolvedCollections>(collection: T, listener: (event: CommitUpdateEvent<T>) => void): void;
    /**
     * Listen for records deleted in a specific collection.
     * @param collection The name of the collection to listen for.
     * @param listener A callback function that receives the commit event.
     */
    onDelete<T extends ResolvedCollections>(collection: T, listener: (event: CommitDeleteEvent<T>) => void): void;
    private createUrl;
    /** Emitted when the connection is opened. */
    on(event: "open", listener: () => void): this;
    /** Emitted when the connection is closed. */
    on(event: "close", listener: () => void): this;
    /** Emitted when any commit is received. */
    on(event: "commit", listener: (event: CommitEvent<ResolvedCollections>) => void): this;
    /** Emitted when an account is updated. */
    on(event: "account", listener: (event: AccountEvent) => void): this;
    /** Emitted when an identity event is received. */
    on(event: "identity", listener: (event: IdentityEvent) => void): this;
    /**
     * Emitted when a network error occurs.
     * @param listener A callback function that receives the error and the last known cursor.
     */
    on(event: "error", listener: (error: Error, cursor?: number) => void): this;
    /**
     * Listen for all commits related to a specific collection.
     * @param collection The name of the collection.
     * @param listener  A callback function that receives the commit event.
     */
    on<T extends ResolvedCollections>(collection: T, listener: (event: CommitEvent<T>) => void): this;
}
/** Resolves a lexicon name to its record type. */
export type ResolveLexicon<T extends string> = T extends keyof Records ? Records[T] : {
    $type: T;
};
/** Checks if any member of a union is assignable to a given type. */
type UnionMemberIsAssignableTo<Union, AssignableTo> = Union extends Union ? Union extends AssignableTo ? true : never : never;
/** Resolves a wildcard string to the record types it matches. */
export type ResolveLexiconWildcard<T extends string> = T extends `${infer Prefix}*` ? true extends UnionMemberIsAssignableTo<keyof Records, `${Prefix}${string}`> ? keyof Records & `${Prefix}${string}` extends infer Lexicon extends string ? Lexicon : never : `${Prefix}${string}` : T;
/** The name of a collection. */
export type Collection = (keyof Records) | (string & {});
/** Generates all possible wildcard strings that match a given collection name. */
type PossibleCollectionWildcards<CollectionName extends string> = CollectionName extends `${infer Prefix}.${infer Suffix}` ? `${Prefix}.*` | `${Prefix}.${PossibleCollectionWildcards<Suffix>}` : never;
/** The name of a collection or a wildcard string matching multiple collections. */
export type CollectionOrWildcard = PossibleCollectionWildcards<keyof Records> | Collection;
/**
 * The types of events that are emitted by {@link Jetstream}.
 * @enum
 */
export declare const EventType: {
    /** A new commit. */
    readonly Commit: "com";
    /** An account's status was updated. */
    readonly Account: "acc";
    /** An account's identity was updated. */
    readonly Identity: "id";
};
export type EventType = typeof EventType[keyof typeof EventType];
/**
 * The types of commits that can be received.
 * @enum
 */
export declare const CommitType: {
    /** A record was created. */
    readonly Create: "c";
    /** A record was updated. */
    readonly Update: "u";
    /** A record was deleted. */
    readonly Delete: "d";
};
export type CommitType = typeof CommitType[keyof typeof CommitType];
/**
 * The base type for events emitted by the {@link Jetstream} class.
 */
export interface EventBase {
    did: At.DID;
    time_us: number;
    type: EventType;
}
/**
 * A commit event. Represents a commit to a user repository.
 */
export interface CommitEvent<RecordType extends string> extends EventBase {
    type: typeof EventType.Commit;
    commit: Commit<RecordType>;
}
/** A commit event where a record was created. */
export interface CommitCreateEvent<RecordType extends string> extends CommitEvent<RecordType> {
    commit: CommitCreate<RecordType>;
}
/** A commit event where a record was updated. */
export interface CommitUpdateEvent<RecordType extends string> extends CommitEvent<RecordType> {
    commit: CommitUpdate<RecordType>;
}
/** A commit event where a record was deleted. */
export interface CommitDeleteEvent<RecordType extends string> extends CommitEvent<RecordType> {
    commit: CommitDelete<RecordType>;
}
/**
 * An account event. Represents a change to an account's status on a host (e.g. PDS or Relay).
 */
export interface AccountEvent extends EventBase {
    type: typeof EventType.Account;
    account: ComAtprotoSyncSubscribeRepos.Account;
}
/**
 * An identity event. Represents a change to an account's identity.
 */
export interface IdentityEvent extends EventBase {
    type: typeof EventType.Identity;
    identity: ComAtprotoSyncSubscribeRepos.Identity;
}
/**
 * The base type for commit events.
 */
export interface CommitBase<RecordType extends string> {
    type: CommitType;
    rev: string;
    collection: RecordType;
    rkey: string;
}
/**
 * A commit event representing a new record.
 */
export interface CommitCreate<RecordType extends string> extends CommitBase<RecordType> {
    type: typeof CommitType.Create;
    record: ResolveLexicon<RecordType>;
    cid: At.CID;
}
/**
 * A commit event representing an update to an existing record.
 */
export interface CommitUpdate<RecordType extends string> extends CommitBase<RecordType> {
    type: typeof CommitType.Update;
    record: ResolveLexicon<RecordType>;
    cid: At.CID;
}
/**
 * A commit event representing a deletion of an existing record.
 */
export interface CommitDelete<RecordType extends string> extends CommitBase<RecordType> {
    type: typeof CommitType.Delete;
}
/**
 * A commit event.
 */
export type Commit<RecordType extends string> = CommitCreate<RecordType> | CommitUpdate<RecordType> | CommitDelete<RecordType>;
export {};
