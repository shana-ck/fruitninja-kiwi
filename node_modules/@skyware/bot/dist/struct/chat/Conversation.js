import { Profile } from "../Profile.js";
import {} from "./ChatMessage.js";
import {} from "./DeletedChatMessage.js";
/**
 * Represents a DM conversation on Bluesky.
 */
export class Conversation {
    bot;
    /** The conversation's ID. */
    id;
    /** Whether the bot account has this conversation muted. */
    muted;
    /** The number of unread messages in the conversation. */
    unreadCount;
    /** The users that are members in this conversation. */
    members;
    /**
     * @param data Data used to construct the conversation.
     * @param bot The active Bot instance.
     */
    constructor({ id, muted, unreadCount, members }, bot) {
        this.bot = bot;
        this.id = id;
        this.muted = muted;
        this.unreadCount = unreadCount;
        this.members = members;
    }
    /**
     * Fetch a list of messages in this conversation.
     * This method returns 100 messages at a time, beginning from the latest message, alongside a cursor to fetch the next 100.
     * @param cursor The cursor to begin fetching from.
     * @returns An array of messages and a cursor for pagination.
     */
    async getMessages(cursor) {
        return this.bot.getConversationMessages(this.id, { cursor: cursor ?? "", limit: 100 });
    }
    /**
     * Send a message in the conversation.
     * @param payload The message to send.
     * @param options Additional options for sending the message.
     * @returns The sent message.
     */
    async sendMessage(payload, options) {
        return this.bot.sendMessage({ conversationId: this.id, ...payload }, options);
    }
    /**
     * Leave the conversation.
     */
    async leave() {
        return this.bot.leaveConversation(this.id);
    }
    /**
     * Constructs an instance from a ConvoView.
     */
    static fromView(view, bot) {
        const convo = new Conversation({
            id: view.id,
            muted: view.muted,
            unreadCount: view.unreadCount,
            members: view.members.map((member) => Profile.fromView(member, bot)),
        }, bot);
        return convo;
    }
}
