import type { AppBskyFeedDefs, At, Brand } from "@atcute/client/lexicons";
import type { Bot } from "../bot/Bot.js";
import { Facet } from "./post/Facet.js";
import { Post } from "./post/Post.js";
import { Profile } from "./Profile.js";
/**
 * Data used to construct a FeedGenerator class.
 * @see FeedGenerator
 */
export interface FeedGeneratorData {
    displayName: string;
    uri: string;
    cid: string;
    did: string;
    creator: Profile;
    description?: string;
    descriptionFacets?: Array<Facet>;
    avatar?: string;
    isOnline?: boolean;
    likeUri?: string;
    indexedAt: Date;
}
/**
 * A feed generator that can be followed to receive posts.
 */
export declare class FeedGenerator {
    protected bot: Bot;
    /** The feed generator's name. */
    displayName: string;
    /** The feed generator's AT URI. */
    uri: At.Uri;
    /** The feed generator's CID. */
    cid: At.CID;
    /** The feed generator's DID. */
    did: At.DID;
    /** The feed generator's creator. */
    creator: Profile;
    /** The feed generator's description. */
    description?: string;
    /** Any facets associated with the feed generator's description. */
    descriptionFacets?: Array<Facet>;
    /** The feed generator's avatar. */
    avatar?: string;
    /** Whether the feed generator is currently online. */
    isOnline?: boolean;
    /** The URI of the feed generator's like record, if the viewer has liked the feed generator. */
    likeUri?: At.Uri;
    /** The time the feed generator was indexed by the AppView. */
    indexedAt: Date;
    /**
     * @param data Feed generator data.
     * @param bot The active Bot instance.
     */
    constructor({ displayName, uri, cid, did, creator, description, descriptionFacets, avatar, isOnline, likeUri, indexedAt }: FeedGeneratorData, bot: Bot);
    /**
     * Like the feed generator.
     * @returns The like record's AT URI.
     */
    like(): Promise<string>;
    /**
     * Unlike the feed generator.
     */
    unlike(): Promise<void>;
    /**
     * Get a feed of posts from the feed generator.
     * @param options Options for fetching the feed.
     * @returns The posts and a cursor for pagination.
     */
    getPosts({ limit, cursor }?: FeedGeneratorGetPostsOptions): Promise<{
        cursor: string | undefined;
        posts: Array<Post>;
    }>;
    /**
     * Apply labels to the feed geenrator.
     * @param labels The labels to apply.
     * @param comment An optional comment.
     */
    label(labels: Array<string>, comment?: string): Promise<import("@atcute/client/lexicons").ToolsOzoneModerationDefs.ModEventView>;
    /**
     * Negate labels previously applied to the feed geenrator.
     * @param labels The labels to negate.
     * @param comment An optional comment.
     */
    negateLabels(labels: Array<string>, comment?: string): Promise<import("@atcute/client/lexicons").ToolsOzoneModerationDefs.ModEventView>;
    /**
     * Constructs an instance from a GeneratorView.
     * @param view The GeneratorView to construct from.
     * @param bot The active Bot instance.
     */
    static fromView(view: Brand.Omit<AppBskyFeedDefs.GeneratorView>, bot: Bot): FeedGenerator;
}
/**
 * Options for the {@link FeedGenerator#getPosts} method.
 */
export interface FeedGeneratorGetPostsOptions {
    /** The maximum number of posts to return (1-100, default 100). */
    limit?: number;
    /** The cursor for pagination. */
    cursor?: string;
}
