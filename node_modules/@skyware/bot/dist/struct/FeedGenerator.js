import { asDid } from "../util/lexicon.js";
import { Facet } from "./post/Facet.js";
import { Post } from "./post/Post.js";
import { Profile } from "./Profile.js";
/**
 * A feed generator that can be followed to receive posts.
 */
export class FeedGenerator {
    bot;
    /** The feed generator's name. */
    displayName;
    /** The feed generator's AT URI. */
    uri;
    /** The feed generator's CID. */
    cid;
    /** The feed generator's DID. */
    did;
    /** The feed generator's creator. */
    creator;
    /** The feed generator's description. */
    description;
    /** Any facets associated with the feed generator's description. */
    descriptionFacets;
    /** The feed generator's avatar. */
    avatar;
    /** Whether the feed generator is currently online. */
    isOnline;
    /** The URI of the feed generator's like record, if the viewer has liked the feed generator. */
    likeUri;
    /** The time the feed generator was indexed by the AppView. */
    indexedAt;
    /**
     * @param data Feed generator data.
     * @param bot The active Bot instance.
     */
    constructor(
    // dprint-ignore
    { displayName, uri, cid, did, creator, description, descriptionFacets, avatar, isOnline, likeUri, indexedAt }, bot) {
        this.bot = bot;
        this.displayName = displayName;
        this.uri = uri;
        this.cid = cid;
        this.did = asDid(did);
        this.creator = creator;
        if (description)
            this.description = description;
        if (descriptionFacets)
            this.descriptionFacets = descriptionFacets;
        if (avatar)
            this.avatar = avatar;
        if (isOnline != undefined)
            this.isOnline = isOnline;
        if (likeUri)
            this.likeUri = likeUri;
        this.indexedAt = indexedAt;
    }
    /**
     * Like the feed generator.
     * @returns The like record's AT URI.
     */
    async like() {
        return this.likeUri = (await this.bot.like({ uri: this.uri, cid: this.cid })).uri;
    }
    /**
     * Unlike the feed generator.
     */
    async unlike() {
        if (this.likeUri)
            await this.bot.unlike(this.likeUri);
        else {
            const { likeUri } = await this.bot.getFeedGenerator(this.uri, { skipCache: true });
            if (likeUri)
                await this.bot.unlike(likeUri);
        }
        delete this.likeUri;
    }
    /**
     * Get a feed of posts from the feed generator.
     * @param options Options for fetching the feed.
     * @returns The posts and a cursor for pagination.
     */
    async getPosts({ limit = 100, cursor = "" } = {}) {
        const response = await this.bot.agent.get("app.bsky.feed.getFeed", {
            params: { feed: this.uri, limit, cursor },
        }).catch((e) => {
            throw new Error("Failed to get feed for generator " + this.uri, { cause: e });
        });
        return {
            cursor: response.data.cursor,
            posts: response.data.feed.map(({ post }) => Post.fromView(post, this.bot)),
        };
    }
    /**
     * Apply labels to the feed geenrator.
     * @param labels The labels to apply.
     * @param comment An optional comment.
     */
    async label(labels, comment) {
        return this.bot.label({ reference: this, labels, comment });
    }
    /**
     * Negate labels previously applied to the feed geenrator.
     * @param labels The labels to negate.
     * @param comment An optional comment.
     */
    async negateLabels(labels, comment) {
        return this.bot.negateLabels({ reference: this, labels, comment });
    }
    /**
     * Constructs an instance from a GeneratorView.
     * @param view The GeneratorView to construct from.
     * @param bot The active Bot instance.
     */
    static fromView(view, bot) {
        const { descriptionFacets, ...rest } = view;
        return new FeedGenerator({
            ...rest,
            creator: Profile.fromView(view.creator, bot),
            indexedAt: new Date(view.indexedAt),
            ...(descriptionFacets?.length && view.description?.length
                ? {
                    descriptionFacets: descriptionFacets.map((facet) => new Facet(view.description, facet)),
                }
                : {}),
        }, bot);
    }
}
