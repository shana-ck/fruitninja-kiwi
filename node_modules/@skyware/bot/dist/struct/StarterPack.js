import {} from "@atcute/client/lexicons";
import { is } from "../util/lexicon.js";
import { FeedGenerator } from "./FeedGenerator.js";
import { List } from "./List.js";
import { Profile } from "./Profile.js";
/**
 * A Bluesky starter pack.
 */
export class StarterPack {
    bot;
    /** The starter pack's name. */
    name;
    /** The starter pack's AT URI. */
    uri;
    /** The starter pack's CID. */
    cid;
    /** The starter pack's description. */
    description;
    /** Any facets associated with the starter pack's description. */
    descriptionFacets;
    /** The starter pack's creator. */
    creator;
    /** The user list associated with the starter pack. */
    userList;
    /** The starter pack's user list's AT URI. */
    userListUri;
    /** Feeds associated with the starter pack. */
    feeds;
    /** The starter pack's feeds' AT URIs. */
    feedUris;
    /** The number of users who joined using the starter pack in the past week. */
    joinedWeekCount;
    /** The number of users who joined using the starter pack in all time. */
    joinedAllTimeCount;
    /** When the starter pack was indexed by the AppView. */
    indexedAt;
    /** Any labels on the starter pack record. */
    labels;
    /**
     * @param data Starter pack data.
     * @param bot The active Bot instance.
     */
    constructor({ name, uri, cid, description, creator, descriptionFacets, userList, userListUri, feeds, feedUris, joinedWeekCount, joinedAllTimeCount, indexedAt, labels, }, bot) {
        this.bot = bot;
        this.name = name;
        this.uri = uri;
        this.cid = cid;
        if (description)
            this.description = description;
        if (descriptionFacets)
            this.descriptionFacets = descriptionFacets;
        this.creator = creator;
        if (userList)
            this.userList = userList;
        this.userListUri = userListUri;
        if (feeds)
            this.feeds = feeds;
        if (feedUris)
            this.feedUris = feedUris;
        if (joinedWeekCount)
            this.joinedWeekCount = joinedWeekCount;
        if (joinedAllTimeCount)
            this.joinedAllTimeCount = joinedAllTimeCount;
        this.indexedAt = indexedAt;
        if (labels)
            this.labels = labels;
    }
    /**
     * Fetches the user list associated with the starter pack.
     * @param options The fetch options.
     * @returns The user list.
     */
    async fetchList({ force = false, ...options } = {}) {
        if (!force && this.userList)
            return this.userList;
        if (!this.userListUri)
            throw new Error("No user list URI");
        return this.userList = await this.bot.getList(this.userListUri, options);
    }
    /**
     * Fetches the feeds associated with the starter pack.
     * @param options The fetch options.
     * @returns The feeds.
     */
    async fetchFeeds({ force = false, ...options } = {}) {
        if (!force && this.feeds)
            return this.feeds;
        if (!this.feedUris?.length)
            return this.feeds = [];
        return this.feeds = await Promise.all(this.feedUris.map((uri) => this.bot.getFeedGenerator(uri, options)));
    }
    /**
     * Constructs an instance from a StarterPackView.
     * @param view The StarterPackView to construct from.
     * @param bot The active Bot instance.
     */
    static fromView(view, bot) {
        if (!is("app.bsky.graph.starterpack", view.record) || !view.cid || !view.uri) {
            throw new Error("Invalid starter pack view");
        }
        return new StarterPack({
            name: view.record.name,
            uri: view.uri,
            cid: view.cid,
            description: view.record.description,
            descriptionFacets: view.record.descriptionFacets,
            creator: Profile.fromView(view.creator, bot),
            userList: "list" in view ? List.fromView(view.list, bot) : undefined,
            userListUri: view.record.list,
            feeds: "feeds" in view
                ? view.feeds.map((feed) => FeedGenerator.fromView(feed, bot))
                : undefined,
            feedUris: view.record.feeds?.map((feed) => feed.uri) ?? [],
            joinedWeekCount: "joinedWeekCount" in view ? view.joinedWeekCount : undefined,
            joinedAllTimeCount: "joinedAllTimeCount" in view ? view.joinedAllTimeCount : undefined,
            indexedAt: new Date(view.indexedAt),
            labels: view.labels,
        }, bot);
    }
}
