import type { At } from "@atcute/client/lexicons";
import type { Bot, BotPostOptions, StrongRef } from "../../bot/Bot.js";
import type { Post } from "./Post.js";
import type { PostPayload, ReplyRef } from "./PostPayload.js";
/**
 * Data used to construct a PostReference class.
 * @see PostReference
 */
export interface PostReferenceData {
    uri: string;
    cid: string;
    replyRef?: ReplyRef | undefined;
}
/**
 * A reference to a post.
 */
export declare class PostReference implements StrongRef {
    protected bot: Bot;
    /** The post's AT URI. */
    uri: At.Uri;
    /** The post's CID. */
    cid: At.CID;
    /** A reference to the post's parent and root post. */
    replyRef?: ReplyRef;
    /**
     * @param data Data used to construct the reference.
     * @param bot The active Bot instance.
     */
    constructor({ uri, cid, replyRef }: PostReferenceData, bot: Bot);
    /**
     * Fetch the full referenced post.
     */
    fetch(): Promise<Post>;
    /**
     * Reply to the post.
     * @param payload The post payload.
     * @param options Optional configuration.
     * @returns A reference to the created post.
     */
    reply(payload: PostPayload, options?: BotPostOptions): Promise<PostReference>;
    /**
     * Create a new post with this post quoted.
     * @param payload The post payload.
     * @param options Optional configuration.
     * @returns A reference to the created post.
     */
    quote(payload: PostPayload, options?: BotPostOptions): Promise<PostReference>;
    /**
     * Like the post.
     */
    like(): Promise<StrongRef>;
    /**
     * Unlike the post.
     */
    unlike(): Promise<void>;
    /**
     * Repost the post.
     */
    repost(): Promise<StrongRef>;
    /**
     * If this post has been reposted, delete the repost.
     */
    deleteRepost(): Promise<void>;
    /**
     * Delete the post.
     */
    delete(): Promise<void>;
    /**
     * Apply labels to the post.
     * @param labels The labels to apply.
     * @param comment An optional comment.
     */
    label(labels: Array<string>, comment?: string): Promise<import("@atcute/client/lexicons").ToolsOzoneModerationDefs.ModEventView>;
    /**
     * Negate labels previously applied to the post.
     * @param labels The labels to negate.
     * @param comment An optional comment.
     */
    negateLabels(labels: Array<string>, comment?: string): Promise<import("@atcute/client/lexicons").ToolsOzoneModerationDefs.ModEventView>;
}
