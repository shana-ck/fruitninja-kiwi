/**
 * A reference to a post.
 */
export class PostReference {
    bot;
    /** The post's AT URI. */
    uri;
    /** The post's CID. */
    cid;
    /** A reference to the post's parent and root post. */
    replyRef;
    /**
     * @param data Data used to construct the reference.
     * @param bot The active Bot instance.
     */
    constructor({ uri, cid, replyRef }, bot) {
        this.bot = bot;
        this.uri = uri;
        this.cid = cid;
        if (replyRef) {
            this.replyRef = {
                parent: { uri: replyRef.parent.uri, cid: replyRef.parent.cid },
                root: { uri: replyRef.root.uri, cid: replyRef.root.cid },
            };
        }
    }
    /**
     * Fetch the full referenced post.
     */
    async fetch() {
        return this.bot.getPost(this.uri);
    }
    /**
     * Reply to the post.
     * @param payload The post payload.
     * @param options Optional configuration.
     * @returns A reference to the created post.
     */
    async reply(payload, options = {}) {
        return this.bot.post({
            ...payload,
            replyRef: {
                parent: { uri: this.uri, cid: this.cid },
                root: this.replyRef?.root ?? { uri: this.uri, cid: this.cid },
            },
        }, options);
    }
    /**
     * Create a new post with this post quoted.
     * @param payload The post payload.
     * @param options Optional configuration.
     * @returns A reference to the created post.
     */
    async quote(payload, options = {}) {
        return this.bot.post({ ...payload, quoted: this }, options);
    }
    /**
     * Like the post.
     */
    async like() {
        return this.bot.like(this);
    }
    /**
     * Unlike the post.
     */
    async unlike() {
        return this.bot.unlike(this.uri);
    }
    /**
     * Repost the post.
     */
    async repost() {
        return this.bot.repost(this);
    }
    /**
     * If this post has been reposted, delete the repost.
     */
    async deleteRepost() {
        return this.bot.deleteRepost(this.uri);
    }
    /**
     * Delete the post.
     */
    async delete() {
        return this.bot.deletePost(this.uri);
    }
    /**
     * Apply labels to the post.
     * @param labels The labels to apply.
     * @param comment An optional comment.
     */
    async label(labels, comment) {
        return this.bot.label({ reference: this, labels, comment });
    }
    /**
     * Negate labels previously applied to the post.
     * @param labels The labels to negate.
     * @param comment An optional comment.
     */
    async negateLabels(labels, comment) {
        return this.bot.negateLabels({ reference: this, labels, comment });
    }
}
