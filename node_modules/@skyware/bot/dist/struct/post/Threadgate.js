import { is } from "../../util/lexicon.js";
import { List } from "../List.js";
/**
 * A threadgate limits who can reply to a post.
 */
export class Threadgate {
    /** The threadgate's CID. */
    cid;
    /** The threadgate's AT URI. */
    uri;
    /** When the threadgate was created. */
    createdAt;
    /** The post this threadgate is attached to. */
    post;
    /** Whether users followed by the threadgate author are allowed to reply. */
    allowsFollowing;
    /** Whether users mentioned in the post are allowed to reply. */
    allowsMentioned;
    /** Lists whose members are allowed to reply. */
    allowedLists;
    /**
     * @param data Threadgate data.
     */
    constructor({ cid, uri, createdAt, post, allowsFollowing = false, allowsMentioned = false, allowedLists = [], }) {
        this.cid = cid;
        this.uri = uri;
        this.createdAt = createdAt;
        this.post = post;
        this.allowsFollowing = allowsFollowing;
        this.allowsMentioned = allowsMentioned;
        this.allowedLists = allowedLists;
    }
    /** Whether the threadgate allows replies based on user lists. */
    get allowsListMembers() {
        return this.allowedLists.length > 0;
    }
    /**
     * Constructs an instance from a ThreadgateView.
     */
    static fromView(view, post, bot) {
        if (!is("app.bsky.feed.threadgate", view.record) || !view.cid || !view.uri) {
            throw new Error("Invalid threadgate view");
        }
        let allowsFollowing = false, allowsMentioned = false;
        for (const rule of view.record.allow ?? []) {
            if (rule.$type === "app.bsky.feed.threadgate#followingRule") {
                allowsFollowing = true;
            }
            else if (rule.$type === "app.bsky.feed.threadgate#mentionRule") {
                allowsMentioned = true;
            }
        }
        return new Threadgate({
            cid: view.cid,
            uri: view.uri,
            createdAt: new Date(view.record.createdAt),
            post,
            allowsFollowing,
            allowsMentioned,
            allowedLists: view.lists?.map((list) => List.fromView(list, bot)) ?? [],
        });
    }
}
