import { utf8IndexToUtf16Index } from "../../richtext/detectFacets.js";
import { asDid, is } from "../../util/lexicon.js";
/**
 * A facet represents a span of text within a string with special meaning (e.g. mentions, links, tags).
 * @see https://docs.bsky.app/docs/advanced-guides/post-richtext#rich-text-facets
 */
export class Facet {
    /** The original text the facet is contained within. */
    sourceText;
    /** The range of bytes in the source text that this facet applies to, when the source text is encoded as UTF-8.
     * Unless you know what you're doing, you should use the {@link index} property.
     */
    byteIndex;
    _index;
    /** The decorations applied to the text within the facet range. */
    features;
    /** The span of text this facet applies to. */
    get span() {
        return this.sourceText.slice(this.index.start, this.index.end);
    }
    /**
     * The range of indices within the source text that this facet applies to.
     * @property start The index of the first character included in the facet.
     * @property end The index of the first character excluded from the facet.
     */
    get index() {
        if (this._index)
            return this._index;
        return this._index = {
            start: utf8IndexToUtf16Index(this.sourceText, this.byteIndex.byteStart),
            end: utf8IndexToUtf16Index(this.sourceText, this.byteIndex.byteEnd),
        };
    }
    /**
     * Creates a new facet.
     * @param text The full source text.
     * @param facet The facet data.
     */
    constructor(text, facet) {
        this.sourceText = text;
        this.byteIndex = { ...facet.index };
        this.features = facet.features.map((feature) => {
            if (is("app.bsky.richtext.facet#mention", feature)) {
                return new MentionFeature(feature.did);
            }
            else if (is("app.bsky.richtext.facet#link", feature)) {
                return new LinkFeature(feature.uri);
            }
            else if (is("app.bsky.richtext.facet#tag", feature)) {
                return new TagFeature(feature.tag);
                // @ts-expect-error â€” feature.$type is never
            }
            else
                throw new Error("Unknown facet feature type " + feature.$type + ".");
        });
    }
    /**
     * Returns a record representation of the facet.
     */
    toRecord() {
        return {
            index: { ...this.byteIndex },
            features: this.features.map((feature) => {
                if (feature.isMention()) {
                    return { $type: "app.bsky.richtext.facet#mention", did: asDid(feature.did) };
                }
                else if (feature.isLink()) {
                    return { $type: "app.bsky.richtext.facet#link", uri: feature.uri };
                }
                else if (feature.isTag()) {
                    return { $type: "app.bsky.richtext.facet#tag", tag: feature.tag };
                }
                else
                    throw new Error("Unknown facet feature type.");
            }),
        };
    }
}
/** Represents a decoration applied to a span of text. */
export class FacetFeature {
    $type;
    /** Whether this facet is a mention. */
    isMention() {
        return this.$type === "app.bsky.richtext.facet#mention";
    }
    /** Whether this facet is a link. */
    isLink() {
        return this.$type === "app.bsky.richtext.facet#link";
    }
    /** Whether this facet is an in-text hashtag. */
    isTag() {
        return this.$type === "app.bsky.richtext.facet#tag";
    }
    /** Represents a specific decoration applied to a span of text. */
    /** @internal */
    constructor(/** The facet type. */ $type) {
        this.$type = $type;
    }
}
/** Represents a user mention. */
export class MentionFeature extends FacetFeature {
    did;
    constructor(/** The mentioned user's DID. */ did) {
        super("app.bsky.richtext.facet#mention");
        this.did = did;
    }
}
/** Represents a hyperlink. */
export class LinkFeature extends FacetFeature {
    uri;
    constructor(/** The referenced link. */ uri) {
        super("app.bsky.richtext.facet#link");
        this.uri = uri;
    }
}
/** Represents an in-text hashtag. */
export class TagFeature extends FacetFeature {
    tag;
    constructor(/** The hashtag, without the leading #. */ tag) {
        super("app.bsky.richtext.facet#tag");
        this.tag = tag;
    }
}
