import type { At, ComAtprotoSyncSubscribeRepos } from "@atcute/client/lexicons";
import { EventEmitter } from "node:events";
import * as WS from "ws";
/**
 * Options for the Firehose class.
 */
export interface FirehoseOptions {
    /**
     * The Relay to connect to.
     */
    relay?: string;
    /**
     * The cursor to listen from. If not provided, the firehose will start from the latest event.
     */
    cursor?: string;
    /**
     * Whether to automatically reconnect when no new messages are received for a period of time.
     * This will not reconnect if the connection was closed intentionally.
     * To do that, listen for the `"close"` event and call `start()` again.
     * @default true
     */
    autoReconnect?: boolean;
}
export declare class Firehose extends EventEmitter {
    /** The relay to connect to. */
    relay: string;
    /** WebSocket connection to the relay. */
    ws?: WS.WebSocket;
    /** The current cursor. */
    cursor: string;
    private autoReconnect;
    private reconnectTimeout;
    /**
     * Creates a new Firehose instance.
     * @param options Optional configuration.
     */
    constructor(options?: FirehoseOptions);
    /**
     * Opens a WebSocket connection to the relay.
     */
    start(): void;
    /**
     * Closes the WebSocket connection.
     */
    close(): void;
    /** Emitted when the connection is opened. */
    on(event: "open", listener: () => void): this;
    /** Emitted when the connection is closed. */
    on(event: "close", listener: (cursor: string) => void): this;
    /**
     * Emitted when the websocket reconnects due to not receiving any messages for a period of time.
     * This will only be emitted if the `autoReconnect` option is `true`.
     */
    on(event: "reconnect", listener: () => void): this;
    /** Emitted when an error occurs while handling a message. */
    on(event: "error", listener: ({ cursor, error }: {
        cursor: string;
        error: Error;
    }) => void): this;
    /** Emitted when an error occurs within the websocket. */
    on(event: "websocketError", listener: ({ cursor, error }: {
        cursor: string;
        error: unknown;
    }) => void): this;
    /** Emitted when an unknown message is received. */
    on(event: "unknown", listener: (message: unknown) => void): this;
    /**
     * Represents an update of an account's handle, or transition to/from invalid state.
     * @deprecated Use on("identity") instead.
     */
    on(event: "handle", listener: (message: ComAtprotoSyncSubscribeRepos.Handle & {
        $type: "com.atproto.sync.subscribeRepos#handle";
    }) => void): this;
    /**
     * Represents an account moving from one PDS instance to another.
     * @deprecated Use on("account") instead.
     */
    on(event: "migrate", listener: (message: ComAtprotoSyncSubscribeRepos.Migrate & {
        $type: "com.atproto.sync.subscribeRepos#migrate";
    }) => void): this;
    /**
     * Indicates that an account has been deleted.
     * @deprecated Use on("account") instead.
     */
    on(event: "tombstone", listener: (message: ComAtprotoSyncSubscribeRepos.Tombstone & {
        $type: "com.atproto.sync.subscribeRepos#tombstone";
    }) => void): this;
    /**
     * Represents a change to an account's identity.
     * Could be an updated handle, signing key, or pds hosting endpoint.
     */
    on(event: "identity", listener: (message: ComAtprotoSyncSubscribeRepos.Identity & {
        $type: "com.atproto.sync.subscribeRepos#identity";
    }) => void): this;
    /** Represents a commit to a user's repository. */
    on(event: "commit", listener: (message: ParsedCommit) => void): this;
    /** An informational message from the relay. */
    on(event: "info", listener: (message: ComAtprotoSyncSubscribeRepos.Info & {
        $type: "com.atproto.sync.subscribeRepos#info";
    }) => void): this;
    private parseMessage;
    private preventReconnect;
    private reconnect;
}
/**
 * Represents a `create` or `update` repository operation.
 */
export interface CreateOrUpdateOp {
    action: "create" | "update";
    /** The record's path in the repository. */
    path: string;
    /** The record's CID. */
    cid: string;
    /** The record itself. */
    record: {};
}
/**
 * Represents a `delete` repository operation.
 */
export interface DeleteOp {
    action: "delete";
    /** The record's path in the repository. */
    path: string;
}
/** A repository operation. */
export type RepoOp = CreateOrUpdateOp | DeleteOp;
/**
 * Represents an update of repository state.
 */
export interface ParsedCommit {
    $type: "com.atproto.sync.subscribeRepos#commit";
    /** The stream sequence number of this message. */
    seq: number;
    /** Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data. */
    tooBig: boolean;
    /** The repo this event comes from. */
    repo: string;
    /** Repo commit object CID. */
    commit: At.CIDLink;
    /** The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event. */
    rev: string;
    /** The rev of the last emitted commit from this repo (if any). */
    since: string | null;
    /** CAR file containing relevant blocks, as a diff since the previous repo state. */
    blocks: Uint8Array;
    /** List of repo mutation operations in this commit (eg, records created, updated, or deleted). */
    ops: Array<RepoOp>;
    /** List of new blobs (by CID) referenced by records in this commit. */
    blobs: At.CIDLink[];
    /** Timestamp of when this message was originally broadcast. */
    time: string;
}
